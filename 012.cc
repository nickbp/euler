/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include <math.h>
#include <stdint.h>
#include <stdio.h>

class TriangleGen {
  public:
    TriangleGen()
        : cur_val(0), cur_inc(1) { }

    int Next() {
        cur_val += cur_inc;
        ++cur_inc;
        return cur_val;
    }

  private:
    size_t cur_val, cur_inc;
};

int main() {
    int lastprint = 0;
    TriangleGen gen;
    for (;;) {
        int tri = gen.Next();
        /* there's presumably a smarter way of calculating this,
           but the dumb way is reasonably speedy.. */
        int divcount = 0;
        for (int i = 1; i <= sqrt(tri); ++i) {
            if (tri % i == 0) {
                divcount += 2;/* wrong for 1, but the rest are fine */
            }
        }
        if (tri - lastprint > 10000000) {
            printf("%d: %d divisors\n", tri, divcount);
            lastprint = tri;
        }
        if (divcount >= 500) {
            printf("!%d: %d divisors\n", tri, divcount);
            break;
        }
    }
    return 0;
}
